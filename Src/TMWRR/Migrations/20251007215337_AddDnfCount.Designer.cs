// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMWRR.Data;

#nullable disable

namespace TMWRR.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251007215337_AddDnfCount")]
    partial class AddDnfCount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TMWRR.Entities.GameEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TMWRR.Entities.GhostCheckpointEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GhostId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ReplayGhostId")
                        .HasColumnType("int");

                    b.Property<float?>("Speed")
                        .HasColumnType("float");

                    b.Property<int?>("StuntsScore")
                        .HasColumnType("int");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GhostId");

                    b.HasIndex("ReplayGhostId");

                    b.ToTable("GhostCheckpoints");
                });

            modelBuilder.Entity("TMWRR.Entities.GhostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("mediumblob");

                    b.Property<string>("Etag")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Ghosts");
                });

            modelBuilder.Entity("TMWRR.Entities.MapEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorScore")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorTime")
                        .HasColumnType("int");

                    b.Property<string>("DeformattedName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EnvironmentId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MapUid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ModeId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NbLaps")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TMFCampaignId")
                        .HasColumnType("varchar(32)");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("mediumblob");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("MapUid");

                    b.HasIndex("ModeId");

                    b.HasIndex("TMFCampaignId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("TMWRR.Entities.ModeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("TMWRR.Entities.ReplayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("mediumblob");

                    b.Property<string>("Etag")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("TMWRR.Entities.ReplayGhostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ReplayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayGhosts");
                });

            modelBuilder.Entity("TMWRR.Entities.TMEnvironmentEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("StartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TMFCampaigns");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresPlayerCountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("DnfCount")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("TMFCampaignScoresPlayerCounts");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresRecordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GhostId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("ReplayId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GhostId");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("TMFCampaignScoresRecords");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresSnapshotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("NoChanges")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatedAt")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("TMFCampaignScoresSnapshots");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFGeneralScoresPlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SnapshotId");

                    b.ToTable("TMFGeneralScoresPlayers");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFGeneralScoresSnapshotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("NoChanges")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("TMFGeneralScoresSnapshots");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFLadderScoresSnapshotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("NoChanges")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("TMFLadderScoresSnapshots");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFLadderScoresXYEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("SnapshotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId");

                    b.ToTable("TMFLadderScoresXYs");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFLoginEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NicknameDeformatted")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TMFLogins");
                });

            modelBuilder.Entity("TMWRR.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginTMFId")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("LoginTMFId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TMWRR.Entities.GhostCheckpointEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.GhostEntity", "Ghost")
                        .WithMany("Checkpoints")
                        .HasForeignKey("GhostId");

                    b.HasOne("TMWRR.Entities.ReplayGhostEntity", "ReplayGhost")
                        .WithMany("Checkpoints")
                        .HasForeignKey("ReplayGhostId");

                    b.Navigation("Ghost");

                    b.Navigation("ReplayGhost");
                });

            modelBuilder.Entity("TMWRR.Entities.MapEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.UserEntity", "Author")
                        .WithMany("Maps")
                        .HasForeignKey("AuthorId");

                    b.HasOne("TMWRR.Entities.TMEnvironmentEntity", "Environment")
                        .WithMany("Maps")
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("TMWRR.Entities.ModeEntity", "Mode")
                        .WithMany("Maps")
                        .HasForeignKey("ModeId");

                    b.HasOne("TMWRR.Entities.TMF.TMFCampaignEntity", "TMFCampaign")
                        .WithMany("Maps")
                        .HasForeignKey("TMFCampaignId");

                    b.Navigation("Author");

                    b.Navigation("Environment");

                    b.Navigation("Mode");

                    b.Navigation("TMFCampaign");
                });

            modelBuilder.Entity("TMWRR.Entities.ReplayGhostEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.ReplayEntity", "Replay")
                        .WithMany("Ghosts")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("TMWRR.Entities.TMEnvironmentEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.GameEntity", "Game")
                        .WithMany("Environments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresPlayerCountEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.MapEntity", "Map")
                        .WithMany("TMFPlayerCounts")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMWRR.Entities.TMF.TMFCampaignScoresSnapshotEntity", "Snapshot")
                        .WithMany("PlayerCounts")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresRecordEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.GhostEntity", "Ghost")
                        .WithMany("Records")
                        .HasForeignKey("GhostId");

                    b.HasOne("TMWRR.Entities.MapEntity", "Map")
                        .WithMany("TMFRecords")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMWRR.Entities.TMF.TMFLoginEntity", "Player")
                        .WithMany("Records")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMWRR.Entities.ReplayEntity", "Replay")
                        .WithMany("Records")
                        .HasForeignKey("ReplayId");

                    b.HasOne("TMWRR.Entities.TMF.TMFCampaignScoresSnapshotEntity", "Snapshot")
                        .WithMany("Records")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ghost");

                    b.Navigation("Map");

                    b.Navigation("Player");

                    b.Navigation("Replay");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresSnapshotEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.TMF.TMFCampaignEntity", "Campaign")
                        .WithMany("ScoresSnapshots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFGeneralScoresPlayerEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.TMF.TMFLoginEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMWRR.Entities.TMF.TMFGeneralScoresSnapshotEntity", "Snapshot")
                        .WithMany("Players")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFLadderScoresXYEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.TMF.TMFLadderScoresSnapshotEntity", "Snapshot")
                        .WithMany("XYs")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("TMWRR.Entities.UserEntity", b =>
                {
                    b.HasOne("TMWRR.Entities.TMF.TMFLoginEntity", "LoginTMF")
                        .WithMany("Users")
                        .HasForeignKey("LoginTMFId");

                    b.Navigation("LoginTMF");
                });

            modelBuilder.Entity("TMWRR.Entities.GameEntity", b =>
                {
                    b.Navigation("Environments");
                });

            modelBuilder.Entity("TMWRR.Entities.GhostEntity", b =>
                {
                    b.Navigation("Checkpoints");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("TMWRR.Entities.MapEntity", b =>
                {
                    b.Navigation("TMFPlayerCounts");

                    b.Navigation("TMFRecords");
                });

            modelBuilder.Entity("TMWRR.Entities.ModeEntity", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("TMWRR.Entities.ReplayEntity", b =>
                {
                    b.Navigation("Ghosts");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("TMWRR.Entities.ReplayGhostEntity", b =>
                {
                    b.Navigation("Checkpoints");
                });

            modelBuilder.Entity("TMWRR.Entities.TMEnvironmentEntity", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignEntity", b =>
                {
                    b.Navigation("Maps");

                    b.Navigation("ScoresSnapshots");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFCampaignScoresSnapshotEntity", b =>
                {
                    b.Navigation("PlayerCounts");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFGeneralScoresSnapshotEntity", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFLadderScoresSnapshotEntity", b =>
                {
                    b.Navigation("XYs");
                });

            modelBuilder.Entity("TMWRR.Entities.TMF.TMFLoginEntity", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TMWRR.Entities.UserEntity", b =>
                {
                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
